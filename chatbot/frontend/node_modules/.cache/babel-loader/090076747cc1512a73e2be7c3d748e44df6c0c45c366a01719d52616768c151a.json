{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kehan Liyanage\\\\Desktop\\\\chatbot\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null); // Ref for auto-scrolling\n\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(scrollToBottom, [messages]); // Scroll to bottom on message updates\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMessage = {\n      text: input,\n      sender: 'user'\n    };\n    const updatedMessages = [...messages, newMessage]; // Update immediately for UI\n    setMessages(updatedMessages);\n    setInput('');\n    setIsLoading(true);\n    try {\n      // Prepare conversation history for the API\n      const history = updatedMessages.map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      }));\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input,\n          history: history\n        }) // Send history\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const botReply = {\n        text: data.reply,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botReply]);\n    } catch (error) {\n      console.error('Error fetching chatbot response:', error);\n      const errorReply = {\n        text: 'Sorry, I encountered an error.',\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, errorReply]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: \"Thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => {\n          if (e.key === 'Enter') sendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"0Rl+6G1WxT5QG5DM/O5vHEtILWo=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","trim","newMessage","text","sender","updatedMessages","history","map","msg","role","content","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","status","data","json","botReply","reply","prevMessages","error","console","errorReply","className","children","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Kehan Liyanage/Desktop/chatbot/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../Chat.css';\r\n\r\nfunction Chat() {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const messagesEndRef = useRef(null); // Ref for auto-scrolling\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    useEffect(scrollToBottom, [messages]); // Scroll to bottom on message updates\r\n\r\n\r\n    const sendMessage = async () => {\r\n        if (!input.trim()) return;\r\n\r\n        const newMessage = { text: input, sender: 'user' };\r\n        const updatedMessages = [...messages, newMessage]; // Update immediately for UI\r\n        setMessages(updatedMessages);\r\n        setInput('');\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            // Prepare conversation history for the API\r\n            const history = updatedMessages.map(msg => ({\r\n                role: msg.sender === 'user' ? 'user' : 'assistant',\r\n                content: msg.text\r\n            }));\r\n\r\n            const response = await fetch('http://localhost:3001/api/chat', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ message: input, history: history }), // Send history\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            const botReply = { text: data.reply, sender: 'bot' };\r\n            setMessages(prevMessages => [...prevMessages, botReply]);\r\n\r\n        } catch (error) {\r\n            console.error('Error fetching chatbot response:', error);\r\n            const errorReply = { text: 'Sorry, I encountered an error.', sender: 'bot' };\r\n            setMessages(prevMessages => [...prevMessages, errorReply]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-messages\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className={`message ${message.sender}`}>\r\n                        {message.text}\r\n                    </div>\r\n                ))}\r\n                {isLoading && <div className=\"message bot\">Thinking...</div>}\r\n                <div ref={messagesEndRef} /> {/*  Element to scroll to */}\r\n            </div>\r\n            <div className=\"chat-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Type your message...\"\r\n                    onKeyDown={(e) => { if (e.key === 'Enter') sendMessage(); }}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}